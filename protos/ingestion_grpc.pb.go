// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/ingestion.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerAPIClient is the client API for SchedulerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerAPIClient interface {
	SendJob(ctx context.Context, in *SendJobRequest, opts ...grpc.CallOption) (*SendJobResponse, error)
}

type schedulerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerAPIClient(cc grpc.ClientConnInterface) SchedulerAPIClient {
	return &schedulerAPIClient{cc}
}

func (c *schedulerAPIClient) SendJob(ctx context.Context, in *SendJobRequest, opts ...grpc.CallOption) (*SendJobResponse, error) {
	out := new(SendJobResponse)
	err := c.cc.Invoke(ctx, "/SchedulerAPI/SendJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerAPIServer is the server API for SchedulerAPI service.
// All implementations must embed UnimplementedSchedulerAPIServer
// for forward compatibility
type SchedulerAPIServer interface {
	SendJob(context.Context, *SendJobRequest) (*SendJobResponse, error)
	mustEmbedUnimplementedSchedulerAPIServer()
}

// UnimplementedSchedulerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerAPIServer struct {
}

func (UnimplementedSchedulerAPIServer) SendJob(context.Context, *SendJobRequest) (*SendJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJob not implemented")
}
func (UnimplementedSchedulerAPIServer) mustEmbedUnimplementedSchedulerAPIServer() {}

// UnsafeSchedulerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerAPIServer will
// result in compilation errors.
type UnsafeSchedulerAPIServer interface {
	mustEmbedUnimplementedSchedulerAPIServer()
}

func RegisterSchedulerAPIServer(s grpc.ServiceRegistrar, srv SchedulerAPIServer) {
	s.RegisterService(&SchedulerAPI_ServiceDesc, srv)
}

func _SchedulerAPI_SendJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerAPIServer).SendJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulerAPI/SendJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerAPIServer).SendJob(ctx, req.(*SendJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerAPI_ServiceDesc is the grpc.ServiceDesc for SchedulerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SchedulerAPI",
	HandlerType: (*SchedulerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJob",
			Handler:    _SchedulerAPI_SendJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ingestion.proto",
}
